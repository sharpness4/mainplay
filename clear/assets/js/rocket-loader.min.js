!function () {
  "use strict";

  function e() {
    var t = [];
    for (var e = 0; e < arguments.length; e++) {
      t[e] = arguments[e];
    }
    (n = console.warn || console.log).call.apply(n, [console, "[ROCKET LOADER] "].concat(t));
    var n;
  }
  function n(t, e) {
    var n = e.parentNode;
    if (n) {
      h(t, n, e);
    }
  }
  function r(t, e) {
    h(t, e, e.childNodes[0]);
  }
  function o(t) {
    var e = t.parentNode;
    if (e) {
      e.removeChild(t);
    }
  }
  function i(t) {
    var e = t.namespaceURI === "http://www.w3.org/2000/svg" ? "xlink:href" : "src";
    return t.getAttribute(e);
  }
  function a(t, e) {
    var n = t.type.substr(e.length);
    return !(n && !E[n.trim()]) && (!k || !t.hasAttribute("nomodule")) && !(!k && "module" === n);
  }
  function c(t) {
    return a(t, "");
  }
  function s(t, e) {
    return function (n) {
      e();
      if (t) {
        return t.call(this, n);
      }
    };
  }
  function u(t, e) {
    t.onload = s(t.onload, e);
    t.onerror = s(t.onerror, e);
  }
  function p(t) {
    var e = document.createElementNS(t.namespaceURI, "script");
    e.async = t.hasAttribute("async");
    e.textContent = t.textContent;
    for (var n = 0; n < t.attributes.length; n++) {
      var r = t.attributes[n];
      try {
        if (r.namespaceURI) {
          e.setAttributeNS(r.namespaceURI, r.name, r.value);
        } else {
          e.setAttribute(r.name, r.value);
        }
      } catch (o) {}
    }
    return e;
  }
  function l(t, e) {
    var n = new I(e);
    t.dispatchEvent(n);
  }
  function d(e) {
    var n = e.namespaceURI === "http://www.w3.org/2000/svg";
    var r = "cf-marker-" + Math.random().toString().slice(2);
    e.setAttribute(r, "");
    var i = n ? "<svg>" + e.outerHTML + "</svg>" : e.outerHTML;
    L.call(document, i);
    var a = document.querySelector("[" + r + "]");
    if (a) {
      a.removeAttribute(r);
      var c = n && a.parentNode;
      if (c) {
        o(c);
      }
    }
    return a;
  }
  function f(t) {
    if (t && "handleEvent" in t) {
      var e = t.handleEvent;
      return "function" == typeof e ? e.bind(t) : e;
    }
    return t;
  }
  function h(t, e, n) {
    var r = n ? function (t) {
      return e.insertBefore(t, n);
    } : function (t) {
      return e.appendChild(t);
    };
    Array.prototype.slice.call(t).forEach(r);
  }
  function y(t, e) {
    function n() {
      this.constructor = t;
    }
    H(t, e);
    t.prototype = null === e ? Object.create(e) : (n.prototype = e.prototype, new n());
  }
  function b(t) {
    var e = t.getAttribute("data-cf-settings");
    if (!e) {
      return null;
    }
    var n = e.split("|");
    return {
      nonce: n[0],
      handlerPrefixLength: +n[1],
      bailout: !t.hasAttribute("defer")
    };
  }
  function g(t) {
    var e = "data-cf-modified-" + t.nonce;
    Array.prototype.forEach.call(document.querySelectorAll("[" + e + "]"), function (n) {
      n.removeAttribute(e);
      Array.prototype.forEach.call(n.attributes, function (e) {
        if (/^on/.test(e.name) && "function" != typeof n[e.name]) {
          n.setAttribute(e.name, e.value.substring(t.handlerPrefixLength));
        }
      });
    });
  }
  function S() {
    if ("undefined" != typeof Promise) {
      window.__cfQR = {
        done: new Promise(function (t) {
          return U = t;
        })
      };
    }
  }
  function w(t) {
    var e = new N(t);
    var n = new C(e);
    e.harvestScriptsInDocument();
    new W(e, {
      nonce: t,
      blocking: true,
      docWriteSimulator: n,
      callback: function () {}
    }).run();
  }
  function x(t) {
    var e = new N(t);
    var n = new C(e);
    e.harvestScriptsInDocument();
    var r = new W(e, {
      nonce: t,
      blocking: false,
      docWriteSimulator: n,
      callback: function () {
        window.__cfRLUnblockHandlers = true;
        r.removePreloadHints();
        P(t);
      }
    });
    r.insertPreloadHints();
    M.runOnLoad(function () {
      r.run();
    });
  }
  function P(t) {
    var e = new O(t);
    M.simulateStateBeforeDeferScriptsActivation();
    e.harvestDeferScriptsInDocument();
    new W(e, {
      nonce: t,
      blocking: false,
      callback: function () {
        M.simulateStateAfterDeferScriptsActivation();
        if (U) {
          U();
        }
      }
    }).run();
  }
  var E = {
    "application/ecmascript": true,
    "application/javascript": true,
    "application/x-ecmascript": true,
    "application/x-javascript": true,
    "text/ecmascript": true,
    "text/javascript": true,
    "text/javascript1.0": true,
    "text/javascript1.1": true,
    "text/javascript1.2": true,
    "text/javascript1.3": true,
    "text/javascript1.4": true,
    "text/javascript1.5": true,
    "text/jscript": true,
    "text/livescript": true,
    "text/x-ecmascript": true,
    "text/x-javascript": true,
    module: true
  };
  var k = undefined !== document.createElement("script").noModule;
  var I = function () {
    if (!window.__rocketLoaderEventCtor) {
      Object.defineProperty(window, "__rocketLoaderEventCtor", {
        value: Event
      });
    }
    return window.__rocketLoaderEventCtor;
  }();
  var L = document.write;
  var _ = document.writeln;
  var H = Object.setPrototypeOf || {
    __proto__: []
  } instanceof Array && function (t, e) {
    t.__proto__ = e;
  } || function (t, e) {
    for (var n in e) if (e.hasOwnProperty(n)) {
      t[n] = e[n];
    }
  };
  var D = function () {
    function t(t) {
      this.nonce = t;
      this.items = [];
    }
    Object.defineProperty(t.prototype, "hasItems", {
      get: function () {
        return this.items.length > 0;
      },
      enumerable: true,
      configurable: true
    });
    t.prototype.pop = function () {
      return this.items.pop();
    };
    t.prototype.forEach = function (t) {
      this.items.forEach(function (e) {
        var n = e.script;
        return t(n);
      });
    };
    t.prototype.harvestScripts = function (t, e) {
      var n = this;
      var r = e.filter;
      var o = e.mutate;
      Array.prototype.slice.call(t.querySelectorAll("script")).filter(r).reverse().forEach(function (t) {
        o(t);
        n.pushScriptOnStack(t);
      });
    };
    t.prototype.pushScriptOnStack = function (t) {
      var e = t.parentNode;
      var n = this.createPlaceholder(t);
      var r = !!i(t);
      e.replaceChild(n, t);
      this.items.push({
        script: t,
        placeholder: n,
        external: r,
        async: r && t.hasAttribute("async"),
        executable: a(t, "")
      });
    };
    t.prototype.hasNonce = function (t) {
      return 0 === (t.getAttribute("type") || "").indexOf(this.nonce);
    };
    t.prototype.removeNonce = function (t) {
      t.type = t.type.substr(this.nonce.length);
    };
    t.prototype.makeNonExecutable = function (t) {
      t.type = this.nonce + t.type;
    };
    t.prototype.isPendingDeferScript = function (t) {
      return t.hasAttribute("defer") || t.type === this.nonce + "module" && !t.hasAttribute("async");
    };
    return t;
  }();
  var N = function (t) {
    function e() {
      return null !== t && t.apply(this, arguments) || this;
    }
    y(e, t);
    e.prototype.harvestScriptsInDocument = function () {
      var t = this;
      this.harvestScripts(document, {
        filter: function (e) {
          return t.hasNonce(e);
        },
        mutate: function (e) {
          if (!t.isPendingDeferScript(e)) {
            t.removeNonce(e);
          }
        }
      });
    };
    e.prototype.harvestScriptsAfterDocWrite = function (t) {
      var e = this;
      this.harvestScripts(t, {
        filter: c,
        mutate: function (t) {
          if (e.isPendingDeferScript(t)) {
            e.makeNonExecutable(t);
          }
        }
      });
    };
    e.prototype.createPlaceholder = function (t) {
      return document.createComment(t.outerHTML);
    };
    return e;
  }(D);
  var O = function (t) {
    function e() {
      return null !== t && t.apply(this, arguments) || this;
    }
    y(e, t);
    e.prototype.harvestDeferScriptsInDocument = function () {
      var t = this;
      this.harvestScripts(document, {
        filter: function (e) {
          return t.hasNonce(e) && t.isPendingDeferScript(e);
        },
        mutate: function (e) {
          return t.removeNonce(e);
        }
      });
    };
    e.prototype.createPlaceholder = function (t) {
      var e = p(t);
      this.makeNonExecutable(e);
      return e;
    };
    return e;
  }(D);
  var C = function () {
    function t(t) {
      this.scriptStack = t;
    }
    t.prototype.enable = function (t) {
      var e = this;
      this.insertionPointMarker = t;
      this.buffer = "";
      document.write = function () {
        var t = [];
        for (var n = 0; n < arguments.length; n++) {
          t[n] = arguments[n];
        }
        return e.write(t, false);
      };
      document.writeln = function () {
        var t = [];
        for (var n = 0; n < arguments.length; n++) {
          t[n] = arguments[n];
        }
        return e.write(t, true);
      };
    };
    t.prototype.flushWrittenContentAndDisable = function () {
      document.write = L;
      document.writeln = _;
      if (this.buffer.length) {
        if (document.contains(this.insertionPointMarker)) {
          if (this.insertionPointMarker.parentNode === document.head) {
            this.insertContentInHead();
          } else {
            this.insertContentInBody();
          }
        } else {
          e("Insertion point marker for document.write was detached from document:", "Markup will not be inserted");
        }
      }
    };
    t.prototype.insertContentInHead = function () {
      var t = new DOMParser();
      var e = "<!DOCTYPE html><head>" + this.buffer + "</head>";
      var o = t.parseFromString(e, "text/html");
      this.scriptStack.harvestScriptsAfterDocWrite(o);
      n(o.head.childNodes, this.insertionPointMarker);
      if (o.body.childNodes.length) {
        var i = Array.prototype.slice.call(o.body.childNodes);
        for (var a = this.insertionPointMarker.nextSibling; a;) {
          i.push(a);
          a = a.nextSibling;
        }
        if (!document.body) {
          L.call(document, "<body>");
        }
        r(i, document.body);
      }
    };
    t.prototype.insertContentInBody = function () {
      var t = this.insertionPointMarker.parentElement;
      var e = document.createElement(t.tagName);
      e.innerHTML = this.buffer;
      this.scriptStack.harvestScriptsAfterDocWrite(e);
      n(e.childNodes, this.insertionPointMarker);
    };
    t.prototype.write = function (t, e) {
      var n = document.currentScript;
      if (n && i(n) && n.hasAttribute("async")) {
        (r = e ? _ : L).call.apply(r, [document].concat(t));
      } else {
        this.buffer += t.map(String).join(e ? "\n" : "");
      }
      var r;
    };
    return t;
  }();
  var j = function () {
    function t() {
      var t = this;
      this.simulatedReadyState = "loading";
      this.bypassEventsInProxies = false;
      this.nativeWindowAddEventListener = window.addEventListener;
      try {
        Object.defineProperty(document, "readyState", {
          get: function () {
            return t.simulatedReadyState;
          }
        });
      } catch (e) {}
      this.setupEventListenerProxy();
      this.updateInlineHandlers();
    }
    t.prototype.runOnLoad = function (t) {
      var e = this;
      this.nativeWindowAddEventListener.call(window, "load", function (n) {
        if (!e.bypassEventsInProxies) {
          return t(n);
        }
      });
    };
    t.prototype.updateInlineHandlers = function () {
      this.proxyInlineHandler(document, "onreadystatechange");
      this.proxyInlineHandler(window, "onload");
      if (document.body) {
        this.proxyInlineHandler(document.body, "onload");
      }
    };
    t.prototype.simulateStateBeforeDeferScriptsActivation = function () {
      this.bypassEventsInProxies = true;
      this.simulatedReadyState = "interactive";
      l(document, "readystatechange");
      this.bypassEventsInProxies = false;
    };
    t.prototype.simulateStateAfterDeferScriptsActivation = function () {
      var t = this;
      this.bypassEventsInProxies = true;
      l(document, "DOMContentLoaded");
      this.simulatedReadyState = "complete";
      l(document, "readystatechange");
      l(window, "load");
      this.bypassEventsInProxies = false;
      window.setTimeout(function () {
        return t.bypassEventsInProxies = true;
      }, 0);
    };
    t.prototype.setupEventListenerProxy = function () {
      var t = this;
      ("undefined" != typeof EventTarget ? [EventTarget.prototype] : [Node.prototype, Window.prototype]).forEach(function (e) {
        return t.patchEventTargetMethods(e);
      });
    };
    t.prototype.patchEventTargetMethods = function (t) {
      var e = this;
      var n = t.addEventListener;
      var r = t.removeEventListener;
      t.addEventListener = function (t, r) {
        var o = [];
        for (var i = 2; i < arguments.length; i++) {
          o[i - 2] = arguments[i];
        }
        var a = this instanceof Window ? ["load"] : this instanceof Document ? ["DOMContentLoaded", "readystatechange"] : [];
        var c = r && r.__rocketLoaderProxiedHandler;
        if (!c) {
          var s = f(r);
          if ("function" == typeof s) {
            c = function (n) {
              if (e.bypassEventsInProxies || a.indexOf(t) < 0) {
                return s.call(this, n);
              }
            };
            Object.defineProperty(r, "__rocketLoaderProxiedHandler", {
              value: c
            });
          } else {
            c = r;
          }
        }
        n.call.apply(n, [this, t, c].concat(o));
      };
      t.removeEventListener = function (t, e) {
        var n = [];
        for (var o = 2; o < arguments.length; o++) {
          n[o - 2] = arguments[o];
        }
        var i = e && e.__rocketLoaderProxiedHandler || e;
        r.call.apply(r, [this, t, i].concat(n));
      };
    };
    t.prototype.proxyInlineHandler = function (t, e) {
      try {
        var n = t[e];
        if (n && !n.__rocketLoaderInlineHandlerProxy) {
          var r = this;
          t[e] = function (t) {
            if (r.bypassEventsInProxies) {
              return n.call(this, t);
            }
          };
          Object.defineProperty(t[e], "__rocketLoaderInlineHandlerProxy", {
            value: true
          });
        }
      } catch (o) {
        return void console.warn("encountered an error when accessing " + e + " handler:", o.message);
      }
    };
    return t;
  }();
  var M = function () {
    if (!window.__rocketLoaderLoadProgressSimulator) {
      Object.defineProperty(window, "__rocketLoaderLoadProgressSimulator", {
        value: new j()
      });
    }
    return window.__rocketLoaderLoadProgressSimulator;
  }();
  var W = function () {
    function t(t, e) {
      this.scriptStack = t;
      this.settings = e;
      this.preloadHints = [];
    }
    t.prototype.insertPreloadHints = function () {
      var t = this;
      this.scriptStack.forEach(function (e) {
        if (a(e, t.settings.nonce)) {
          var n = i(e);
          var r = /chrome/i.test(navigator.userAgent) && /google/i.test(navigator.vendor) && e.hasAttribute("integrity");
          if (n && !r) {
            var o = document.createElement("link");
            o.setAttribute("rel", "preload");
            o.setAttribute("as", "script");
            o.setAttribute("href", n);
            if (e.crossOrigin) {
              o.setAttribute("crossorigin", e.crossOrigin);
            }
            document.head.appendChild(o);
            t.preloadHints.push(o);
          }
        }
      });
    };
    t.prototype.removePreloadHints = function () {
      this.preloadHints.forEach(function (t) {
        return o(t);
      });
    };
    t.prototype.run = function () {
      var t = this;
      for (var e = this; this.scriptStack.hasItems;) {
        var n = function () {
          var n = e.settings.docWriteSimulator;
          var r = e.scriptStack.pop();
          if (n && !r.async) {
            n.enable(r.placeholder);
          }
          var o = e.activateScript(r);
          return o ? r.external && r.executable && !r.async ? (u(o, function () {
            t.finalizeActivation(r);
            t.run();
          }), {
            value: undefined
          }) : void e.finalizeActivation(r) : (n && n.flushWrittenContentAndDisable(), "continue");
        }();
        if ("object" == typeof n) {
          return n.value;
        }
      }
      if (!this.scriptStack.hasItems) {
        this.settings.callback();
      }
    };
    t.prototype.finalizeActivation = function (t) {
      if (this.settings.docWriteSimulator && !t.async) {
        this.settings.docWriteSimulator.flushWrittenContentAndDisable();
      }
      M.updateInlineHandlers();
      o(t.placeholder);
    };
    t.prototype.activateScript = function (t) {
      var n = t.script;
      var r = t.placeholder;
      var o = t.external;
      var i = t.async;
      var a = r.parentNode;
      if (!document.contains(r)) {
        e("Placeholder for script \n" + n.outerHTML + "\n was detached from document.", "Script will not be executed.");
        return null;
      }
      var c = this.settings.blocking && o && !i ? d(n) : p(n);
      return c ? (a.insertBefore(c, r), c) : (e("Failed to create activatable copy of script \n" + n.outerHTML + "\n", "Script will not be executed."), null);
    };
    return t;
  }();
  var U = undefined;
  !function () {
    var t = document.currentScript;
    if (t) {
      var n = b(t);
      if (n) {
        o(t);
        g(n);
        M.updateInlineHandlers();
        if (n.bailout) {
          w(n.nonce);
        } else {
          S();
          x(n.nonce);
        }
      } else {
        e("Activator script doesn't have settings. No scripts will be executed.");
      }
    } else {
      e("Can't obtain activator script. No scripts will be executed.");
    }
  }();
}();
